
func __init() -> (Producer**, Consumer**) {
    
    call __heap_init();
    
    var ret: (Producer**, Consumer**);
    
    // Allocate space for each
    var prod: Producer** = malloc(6);
    var cons: Consumer** = malloc(6);
    
    // Create producer objects
    *(prod + 0) = newParticipant(250, 200);
    *(prod + 1) = newParticipant(75, 240);
    *(prod + 2) = newParticipant(100, 450);
    *(prod + 3) = newParticipant(150, 600);
    *(prod + 4) = newParticipant(200, 700);
    *(prod + 5) = 0;
    
    // Create consumer objects
    *(cons + 0) = [Consumer*] newParticipant(150, 900);
    *(cons + 1) = [Consumer*] newParticipant(100, 700);
    *(cons + 2) = [Consumer*] newParticipant(210, 650);
    *(cons + 3) = [Consumer*] newParticipant(140, 500);
    *(cons + 4) = [Consumer*] newParticipant(150, 350);
    *(cons + 5) = 0;
    
    ret.f0 = make_cumulative(prod);
    ret.f1 = [Consumer**] make_cumulative( [Producer**] cons );
    
    return ret;
    
}

func newParticipant(q: int, p: int) -> Producer* {
    
    var producer: Producer* = malloc(sizeof(Producer));
    
    producer->quantity = q;
    producer->price = p;
    
    return producer;
    
}

func make_cumulative(producers: Producer**) -> Producer** {
    
    var i = 0;
    var current_prod = *producers;
    
    while current_prod {
        
        i @+= 1;
        var next_prod = *(producers + i);
        
        if next_prod {
            next_prod->quantity @+= current_prod->quantity;
        }
        
        current_prod = next_prod;
        
    }
    
    return producers;
    
}
